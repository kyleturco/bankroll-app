'use strict';

angular.module('bankRoll').controller('IncomeController', function ($scope, incomeFactory, $firebaseObject, API_URL, $rootScope, currentUser) {
  var vm = this;
  var fb = new Firebase(API_URL);
  // var authData = fb.getAuth();

  var profileRef = new Firebase('https://bankroll.firebaseio.com/profiles');
  var currentUserIncome = profileRef.child($rootScope.auth.uid).child('income');
  $scope.incomeList = $firebaseObject(currentUserIncome);
  console.log(currentUserIncome);

  incomeFactory.allIncome(function (income) {
    vm.income = income;
  });

  // vm.id = currentUser.uid;

  // incomeFactory.getOne(vm.id, function (income) {
  //   vm.income = income;
  // });

  // vm.destroy = function (id) {
  //   incomeFactory.destroy(vm.id, function () {
  //     $location.path('/overview');
  //   });
  // };

  vm.saveIncome = function () {
    debugger;
    var randNum = Math.floor(Math.random() * 1000000000000000);
    var profileRef = new Firebase('https://bankroll.firebaseio.com/profiles/');
    vm.income.time = Date();
    vm.income.date = JSON.stringify(vm.income.date);
    profileRef.child($rootScope.auth.uid + '/income' + '/income' + randNum).set(vm.income, function (err) {
      console.log('done setting income, err:', err);
      // $scope.incomeList = $firebaseObject(profileRef);
      // value has been set, can redirect the user or what ever
      vm.income = {};
      $scope.$apply();
    });
  };
  // vm.onModalLoad = function () {};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3NldHMvb3ZlcnZpZXcvaW5jb21lLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQ0osTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUVsQixVQUFVLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxNQUFNLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtBQUNsSCxNQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxNQUFJLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7O0FBSS9CLE1BQUksVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDMUUsTUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlFLFFBQU0sQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkQsU0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUUvQixlQUFhLENBQUMsU0FBUyxDQUFDLFVBQVMsTUFBTSxFQUFDO0FBQ3RDLE1BQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQ3BCLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUFjSCxJQUFFLENBQUMsVUFBVSxHQUFHLFlBQVk7QUFDMUIsYUFBUztBQUNULFFBQUksT0FBTyxHQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGdCQUFnQixDQUFDLEFBQUMsQ0FBQztBQUM3RCxRQUFJLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQzNFLE1BQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDO0FBQ3hCLE1BQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxjQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxTQUFTLEdBQUksT0FBTyxBQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFTLEdBQUcsRUFBRTtBQUNyRyxhQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7QUFHOUMsUUFBRSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDZixZQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDakIsQ0FBQyxDQUFDO0dBQ0osQ0FBQzs7Q0FFTCxDQUFDLENBQUMiLCJmaWxlIjoic3JjL2Fzc2V0cy9vdmVydmlldy9pbmNvbWUuY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbiAgLm1vZHVsZSgnYmFua1JvbGwnKVxuXG4gIC5jb250cm9sbGVyKCdJbmNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24gKCRzY29wZSwgaW5jb21lRmFjdG9yeSwgJGZpcmViYXNlT2JqZWN0LCBBUElfVVJMLCAkcm9vdFNjb3BlLCBjdXJyZW50VXNlcikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIGZiID0gbmV3IEZpcmViYXNlKEFQSV9VUkwpO1xuICAgIC8vIHZhciBhdXRoRGF0YSA9IGZiLmdldEF1dGgoKTtcblxuXG4gICAgdmFyIHByb2ZpbGVSZWYgPSBuZXcgRmlyZWJhc2UoJ2h0dHBzOi8vYmFua3JvbGwuZmlyZWJhc2Vpby5jb20vcHJvZmlsZXMnKTtcbiAgICB2YXIgY3VycmVudFVzZXJJbmNvbWUgPSBwcm9maWxlUmVmLmNoaWxkKCRyb290U2NvcGUuYXV0aC51aWQpLmNoaWxkKCdpbmNvbWUnKTtcbiAgICAkc2NvcGUuaW5jb21lTGlzdCA9ICRmaXJlYmFzZU9iamVjdChjdXJyZW50VXNlckluY29tZSk7XG4gICAgY29uc29sZS5sb2coY3VycmVudFVzZXJJbmNvbWUpO1xuXG4gICAgaW5jb21lRmFjdG9yeS5hbGxJbmNvbWUoZnVuY3Rpb24oaW5jb21lKXtcbiAgICAgIHZtLmluY29tZSA9IGluY29tZTtcbiAgICB9KTtcblxuICAgIC8vIHZtLmlkID0gY3VycmVudFVzZXIudWlkO1xuXG4gICAgLy8gaW5jb21lRmFjdG9yeS5nZXRPbmUodm0uaWQsIGZ1bmN0aW9uIChpbmNvbWUpIHtcbiAgICAvLyAgIHZtLmluY29tZSA9IGluY29tZTtcbiAgICAvLyB9KTtcblxuICAgIC8vIHZtLmRlc3Ryb3kgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAvLyAgIGluY29tZUZhY3RvcnkuZGVzdHJveSh2bS5pZCwgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICAkbG9jYXRpb24ucGF0aCgnL292ZXJ2aWV3Jyk7XG4gICAgLy8gICB9KTtcbiAgICAvLyB9O1xuXG4gICAgdm0uc2F2ZUluY29tZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgdmFyIHJhbmROdW0gPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMDAwMDAwMCkpO1xuICAgICAgdmFyIHByb2ZpbGVSZWYgPSBuZXcgRmlyZWJhc2UoJ2h0dHBzOi8vYmFua3JvbGwuZmlyZWJhc2Vpby5jb20vcHJvZmlsZXMvJyk7XG4gICAgICB2bS5pbmNvbWUudGltZSA9IERhdGUoKTtcbiAgICAgIHZtLmluY29tZS5kYXRlID0gSlNPTi5zdHJpbmdpZnkodm0uaW5jb21lLmRhdGUpO1xuICAgICAgcHJvZmlsZVJlZi5jaGlsZCgkcm9vdFNjb3BlLmF1dGgudWlkICsgJy9pbmNvbWUnICsgJy9pbmNvbWUnICsgKHJhbmROdW0pKS5zZXQodm0uaW5jb21lLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgc2V0dGluZyBpbmNvbWUsIGVycjonLCBlcnIpO1xuICAgICAgLy8gJHNjb3BlLmluY29tZUxpc3QgPSAkZmlyZWJhc2VPYmplY3QocHJvZmlsZVJlZik7XG4gICAgICAgIC8vIHZhbHVlIGhhcyBiZWVuIHNldCwgY2FuIHJlZGlyZWN0IHRoZSB1c2VyIG9yIHdoYXQgZXZlclxuICAgICAgICB2bS5pbmNvbWUgPSB7fTtcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyB2bS5vbk1vZGFsTG9hZCA9IGZ1bmN0aW9uICgpIHt9O1xufSk7XG4iXX0=
