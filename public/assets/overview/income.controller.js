'use strict';

angular.module('bankRoll').controller('IncomeController', function ($scope, incomeFactory, $firebaseObject, API_URL, $rootScope, currentUser) {
  var vm = this;
  var fb = new Firebase(API_URL);
  // var authData = fb.getAuth();

  var profileRef = new Firebase('https://bankroll.firebaseio.com/profiles');
  var currentUserIncome = profileRef.child($rootScope.auth.uid).child('income');
  $scope.incomeList = $firebaseObject(currentUserIncome);
  console.log(currentUserIncome);

  incomeFactory.allIncome(function (income) {
    vm.income = income;
  });

  // vm.id = currentUser.uid;

  // incomeFactory.getOne(vm.id, function (income) {
  //   vm.income = income;
  // });

  // vm.destroy = function (id) {
  //   incomeFactory.destroy(vm.id, function () {
  //     $location.path('/overview');
  //   });
  // };

  vm.saveIncome = function () {
    var randNum = Math.floor(Math.random() * 1000000000000000);
    var profileRef = new Firebase('https://bankroll.firebaseio.com/profiles/');
    vm.income.time = Date();
    profileRef.child($rootScope.auth.uid).child('income').child('income' + randNum).set(vm.income, function (err) {
      console.log('done setting income, err:', err);
      // $scope.incomeList = $firebaseObject(profileRef);
      // value has been set, can redirect the user or what ever
      vm.income = {};
      $scope.$apply();
    });
  };
  // vm.onModalLoad = function () {};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3NldHMvb3ZlcnZpZXcvaW5jb21lLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQ0osTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUVsQixVQUFVLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxNQUFNLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtBQUNsSCxNQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxNQUFJLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7O0FBSS9CLE1BQUksVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDMUUsTUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlFLFFBQU0sQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkQsU0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUUvQixlQUFhLENBQUMsU0FBUyxDQUFDLFVBQVMsTUFBTSxFQUFDO0FBQ3RDLE1BQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQ3BCLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUFjSCxJQUFFLENBQUMsVUFBVSxHQUFHLFlBQVk7QUFDMUIsUUFBSSxPQUFPLEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsQUFBQyxDQUFDO0FBQzdELFFBQUksVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDM0UsTUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDeEIsY0FBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFJLE9BQU8sQUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBUyxHQUFHLEVBQUU7QUFDN0csYUFBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQzs7O0FBRzlDLFFBQUUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2YsWUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2pCLENBQUMsQ0FBQztHQUNKLENBQUM7O0NBRUwsQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9hc3NldHMvb3ZlcnZpZXcvaW5jb21lLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gIC5tb2R1bGUoJ2JhbmtSb2xsJylcblxuICAuY29udHJvbGxlcignSW5jb21lQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsIGluY29tZUZhY3RvcnksICRmaXJlYmFzZU9iamVjdCwgQVBJX1VSTCwgJHJvb3RTY29wZSwgY3VycmVudFVzZXIpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBmYiA9IG5ldyBGaXJlYmFzZShBUElfVVJMKTtcbiAgICAvLyB2YXIgYXV0aERhdGEgPSBmYi5nZXRBdXRoKCk7XG5cblxuICAgIHZhciBwcm9maWxlUmVmID0gbmV3IEZpcmViYXNlKCdodHRwczovL2Jhbmtyb2xsLmZpcmViYXNlaW8uY29tL3Byb2ZpbGVzJyk7XG4gICAgdmFyIGN1cnJlbnRVc2VySW5jb21lID0gcHJvZmlsZVJlZi5jaGlsZCgkcm9vdFNjb3BlLmF1dGgudWlkKS5jaGlsZCgnaW5jb21lJyk7XG4gICAgJHNjb3BlLmluY29tZUxpc3QgPSAkZmlyZWJhc2VPYmplY3QoY3VycmVudFVzZXJJbmNvbWUpO1xuICAgIGNvbnNvbGUubG9nKGN1cnJlbnRVc2VySW5jb21lKTtcblxuICAgIGluY29tZUZhY3RvcnkuYWxsSW5jb21lKGZ1bmN0aW9uKGluY29tZSl7XG4gICAgICB2bS5pbmNvbWUgPSBpbmNvbWU7XG4gICAgfSk7XG5cbiAgICAvLyB2bS5pZCA9IGN1cnJlbnRVc2VyLnVpZDtcblxuICAgIC8vIGluY29tZUZhY3RvcnkuZ2V0T25lKHZtLmlkLCBmdW5jdGlvbiAoaW5jb21lKSB7XG4gICAgLy8gICB2bS5pbmNvbWUgPSBpbmNvbWU7XG4gICAgLy8gfSk7XG5cbiAgICAvLyB2bS5kZXN0cm95ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgLy8gICBpbmNvbWVGYWN0b3J5LmRlc3Ryb3kodm0uaWQsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgJGxvY2F0aW9uLnBhdGgoJy9vdmVydmlldycpO1xuICAgIC8vICAgfSk7XG4gICAgLy8gfTtcblxuICAgIHZtLnNhdmVJbmNvbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmFuZE51bSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwMDAwMDAwKSk7XG4gICAgICB2YXIgcHJvZmlsZVJlZiA9IG5ldyBGaXJlYmFzZSgnaHR0cHM6Ly9iYW5rcm9sbC5maXJlYmFzZWlvLmNvbS9wcm9maWxlcy8nKTtcbiAgICAgIHZtLmluY29tZS50aW1lID0gRGF0ZSgpO1xuICAgICAgcHJvZmlsZVJlZi5jaGlsZCgkcm9vdFNjb3BlLmF1dGgudWlkKS5jaGlsZCgnaW5jb21lJykuY2hpbGQoJ2luY29tZScgKyAocmFuZE51bSkpLnNldCh2bS5pbmNvbWUsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnZG9uZSBzZXR0aW5nIGluY29tZSwgZXJyOicsIGVycik7XG4gICAgICAvLyAkc2NvcGUuaW5jb21lTGlzdCA9ICRmaXJlYmFzZU9iamVjdChwcm9maWxlUmVmKTtcbiAgICAgICAgLy8gdmFsdWUgaGFzIGJlZW4gc2V0LCBjYW4gcmVkaXJlY3QgdGhlIHVzZXIgb3Igd2hhdCBldmVyXG4gICAgICAgIHZtLmluY29tZSA9IHt9O1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIHZtLm9uTW9kYWxMb2FkID0gZnVuY3Rpb24gKCkge307XG59KTtcbiJdfQ==
